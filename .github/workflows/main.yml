# This is a basic workflow to help you get started with Actions

name: Build stage applications and upload them to Firebase App Distribution

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches:
        - main
        - development
  
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
       #- uses: actions/checkout@v3
    #  - name: pod install
    #    run: pod install
       - name: Import certificates (iOS)
       
         env:
           BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_P12_ENT }}
           P12_PASSWORD: ${{ secrets.IOS_P12_IH_PASSWORD }}
           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_STAGE }}
           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certficate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
            
            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
            
            #create temporary keychain
            security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
            
            #import certificate to keychain
            security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH
            
            #apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
            
        - name: iOS app
          run: xcodebuild -scheme "Actions Production" clean archive -archivePath "Actions" -configuration "Release Production"
        - name: export ipa
          env:
            EXPORT_PLIST: ${{ secrets.IOS_EXPORT_PRODUCTION }}
            run: |
                #  create export options
                EXPORT_PLIST_PATH=$RUNNER_TEMP/ExportOptions.plist
                echo -n "$EXPORT_PLIST" | base64 --decode --output $EXPORT_PLIST_PATH
                xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/Actions.xcarchive -exportOptionsPlist $EXPORT_PLIST_PATH -exportPath $RUNNER_TEMP/export
                
            # - name: Upload iPA
            #   uses: actions/upload-artifact@master
            #   with:
            #     path: /Users/cobemacmini/ios-runner/_work/_temp/export/
            
        - name: Rename the file, remove whitespace
          run:  |
              echo Export directory contents:
              ls /Users/dev/ios-runner/_work/_temp/export/
              mv "/Users/dev/ios-runner/_work/_temp/export/Actions Production.ipa" "/Users/dev/ios-runner/_work/_temp/export/ActionsProduction.ipa
              ls /Users/dev/ios-runner/_work/_temp/export/
              
        - name: Decode auth. api key file and save it
          env:
            API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          run:  |
              ls ~/private_keys
              echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
              echo "After saving: "
              ls ~/private_keys
              
        - name: "Upload file to test flight using CLI"
          run:  |
              echo "Starting upload. "
              ls ~/private_keys
              xcrun altool --validate-app -f /Users/dev/ios-runner/_work/_temp/export/ActionsProduction.ipa -t ios --apikey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID}}
              xcrun altool --upload-app -f /Users/dev/ios-runner/_work/_temp/export/ActionsProduction.ipa -t ios --apikey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID}}
              
              echo -n "$API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
              echo "After saving: "
              ls ~/private_keys
        
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
     # - name: Run a multi-line script
     #   run: |
     #     echo Add other actions to build,
     #     echo test, and deploy your project.



